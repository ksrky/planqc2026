@inproceedings{ALTENKIRCH2005_FunctionalQuantumProgramming,
  title = {A {{Functional Quantum Programming Language}}},
  booktitle = {20th {{Annual IEEE Symposium}} on {{Logic}} in {{Computer Science}} ({{LICS}}' 05)},
  author = {Altenkirch, T. and Grattage, J.},
  year = 2005,
  pages = {249--258},
  publisher = {IEEE},
  address = {Chicago, IL, USA},
  doi = {10.1109/LICS.2005.1},
  urldate = {2025-10-01},
  abstract = {We introduce the language QML, a functional language for quantum computations on finite types. Its design is guided by its categorical semantics: QML programs are interpreted by morphisms in the category of finite quantum computations, which provides a constructive semantics of irreversible quantum computations realisable as quantum gates. QML integrates reversible and irreversible quantum computations in one language, using first order strict linear logic to make weakenings explicit. Strict programs are free from decoherence and hence preserve superpositions and entanglement -- which is essential for quantum parallelism.},
  isbn = {978-0-7695-2266-1},
  langid = {english},
  file = {G:\マイドライブ\Zotero\Altenkirch and Grattage - 2005 - A functional quantum programming language 2.pdf}
}

@inproceedings{ARRIGHI2004_OperationalSemanticsFormal,
  title = {Operational Semantics for Formal Tensorial Calculus},
  booktitle = {Proceedings of the {{International Workshop}} on {{Quantum Programming Languages}}},
  author = {Arrighi, Pablo and Dowek, Gilles},
  year = 2004,
  pages = {21--38},
  abstract = {With a view towards models of quantum computation, we define a functional language where all functions are linear operators by construction. A small step operational semantic (and hence an interpreter/simulator) is provided for this language in the form of a term rewrite systems. The linear-algebraic {$\lambda$}-calculus hereby constructed is linear in a different (yet related) sense to that, say, of the linear {$\lambda$}-calculus. These various notions of linearity are discussed in the context of quantum programming languages .},
  langid = {english},
  file = {G:\マイドライブ\Zotero\Arrighi and Dowek - Operational semantics for formal tensorial calculus.pdf}
}

@article{ARRIGHI2017_LinealLinearalgebraicLambdacalculus,
  title = {Lineal: {{A}} Linear-Algebraic {{Lambda-calculus}}},
  shorttitle = {Lineal},
  author = {Arrighi, Pablo and Dowek, Gilles},
  year = 2017,
  month = mar,
  journal = {Logical Methods in Computer Science},
  volume = {Volume 13, Issue 1},
  publisher = {Episciences.org},
  issn = {1860-5974},
  doi = {10.23638/LMCS-13(1:8)2017},
  urldate = {2025-08-22},
  abstract = {We provide a computational definition of the notions of vector space and bilinear functions. We use this result to introduce a minimal language combining higher-order computation and linear algebra. This language extends the Lambda-calculus with the possibility to make arbitrary linear combinations of terms alpha.t + beta.u. We describe how to "execute" this language in terms of a few rewrite rules, and justify them through the two fundamental requirements that the language be a language of linear operators, and that it be higher-order. We mention the perspectives of this work in the field of quantum computation, whose circuits we show can be easily encoded in the calculus. Finally, we prove the confluence of the entire calculus.},
  file = {G:\マイドライブ\Zotero\Arrighi and Dowek - 2017 - Lineal A linear-algebraic Lambda-calculus.pdf}
}

@article{ARRIGHI2017_VectorialLcalculus,
  title = {The Vectorial {\emph{{$\lambda$}}}-Calculus},
  author = {Arrighi, Pablo and {D{\'i}az-Caro}, Alejandro and Valiron, Beno{\^i}t},
  year = 2017,
  month = jun,
  journal = {Information and Computation},
  volume = {254},
  pages = {105--139},
  issn = {0890-5401},
  doi = {10.1016/j.ic.2017.04.001},
  urldate = {2025-09-02},
  abstract = {We describe a type system for the linear-algebraic {$\lambda$}-calculus. The type system accounts for the linear-algebraic aspects of this extension of {$\lambda$}-calculus: it is able to statically describe the linear combinations of terms that will be obtained when reducing the programs. This gives rise to an original type theory where types, in the same way as terms, can be superposed into linear combinations. We prove that the resulting typed {$\lambda$}-calculus is strongly normalising and features weak subject reduction. Finally, we show how to naturally encode matrices and vectors in this typed calculus.},
  file = {G:\マイドライブ\Zotero\Arrighi et al. - 2017 - The vectorial λ-calculus 1.pdf}
}

@inproceedings{CRUBILLÉ2014_ProbabilisticApplicativeBisimulation,
  title = {On {{Probabilistic Applicative Bisimulation}} and {{Call-by-Value}} {$\lambda$}-{{Calculi}}},
  booktitle = {Programming {{Languages}} and {{Systems}}},
  author = {Crubill{\'e}, Rapha{\"e}lle and Dal Lago, Ugo},
  editor = {Shao, Zhong},
  year = 2014,
  pages = {209--228},
  publisher = {Springer},
  address = {Berlin, Heidelberg},
  doi = {10.1007/978-3-642-54833-8_12},
  abstract = {Probabilistic applicative bisimulation is a recently introduced coinductive methodology for program equivalence in a probabilistic, higher-order, setting. In this paper, the technique is applied to a typed, call-by-value, lambda-calculus. Surprisingly, the obtained relation coincides with context equivalence, contrary to what happens when call-by-name evaluation is considered. Even more surprisingly, full-abstraction only holds in a symmetric setting.},
  isbn = {978-3-642-54833-8},
  langid = {english},
  keywords = {bisimulation,coinduction,lambda calculus,probabilistic computation},
  file = {G:\マイドライブ\Zotero\Crubillé and Dal Lago - 2014 - On Probabilistic Applicative Bisimulation and Call-by-Value λ-Calculi.pdf}
}

@inproceedings{CRUBILLÉ2014_ProbabilisticApplicativeBisimulationa,
  title = {On {{Probabilistic Applicative Bisimulation}} and {{Call-by-Value}} {$\lambda$}-{{Calculi}}},
  booktitle = {Programming {{Languages}} and {{Systems}}},
  author = {Crubill{\'e}, Rapha{\"e}lle and Dal Lago, Ugo},
  editor = {Shao, Zhong},
  year = 2014,
  pages = {209--228},
  publisher = {Springer},
  address = {Berlin, Heidelberg},
  doi = {10.1007/978-3-642-54833-8_12},
  abstract = {Probabilistic applicative bisimulation is a recently introduced coinductive methodology for program equivalence in a probabilistic, higher-order, setting. In this paper, the technique is applied to a typed, call-by-value, lambda-calculus. Surprisingly, the obtained relation coincides with context equivalence, contrary to what happens when call-by-name evaluation is considered. Even more surprisingly, full-abstraction only holds in a symmetric setting.},
  isbn = {978-3-642-54833-8},
  langid = {english},
  keywords = {bisimulation,coinduction,lambda calculus,probabilistic computation},
  file = {G:\マイドライブ\Zotero\Crubillé and Dal Lago - 2014 - On Probabilistic Applicative Bisimulation and Call-by-Value λ-Calculi 1.pdf}
}

@inproceedings{DALLAGO2014_CoinductiveEquivalencesHigherorder,
  title = {On Coinductive Equivalences for Higher-Order Probabilistic Functional Programs},
  booktitle = {Proceedings of the 41st {{ACM SIGPLAN-SIGACT Symposium}} on {{Principles}} of {{Programming Languages}}},
  author = {Dal Lago, Ugo and Sangiorgi, Davide and Alberti, Michele},
  year = 2014,
  month = jan,
  series = {{{POPL}} '14},
  pages = {297--308},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/2535838.2535872},
  urldate = {2025-10-31},
  abstract = {We study bisimulation and context equivalence in a probabilistic lambda-calculus. The contributions of this paper are threefold. Firstly we show a technique for proving congruence of probabilistic applicative bisimilarity. While the technique follows Howe's method, some of the technicalities are quite different, relying on non-trivial "disentangling" properties for sets of real numbers. Secondly we show that, while bisimilarity is in general strictly finer than context equivalence, coincidence between the two relations is attained on pure lambda-terms. The resulting equality is that induced by Levy-Longo trees, generally accepted as the finest extensional equivalence on pure lambda-terms under a lazy regime. Finally, we derive a coinductive characterisation of context equivalence on the whole probabilistic language, via an extension in which terms akin to distributions may appear in redex position. Another motivation for the extension is that its operational semantics allows us to experiment with a different congruence technique, namely that of logical bisimilarity.},
  isbn = {978-1-4503-2544-8},
  file = {G:\マイドライブ\Zotero\Dal Lago et al. - 2014 - On coinductive equivalences for higher-order probabilistic functional programs.pdf}
}

@inproceedings{DÍAZ-CARO2017_TypingQuantumSuperpositions,
  title = {Typing {{Quantum Superpositions}} and {{Measurement}}},
  booktitle = {Lecture {{Notes}} in {{Computer Science}}},
  author = {{D{\'i}az-Caro}, Alejandro and Dowek, Gilles},
  editor = {{Mart{\'i}n-Vide}, Carlos and Neruda, Roman and {Vega-Rodr{\'i}guez}, Miguel A.},
  year = 2017,
  month = feb,
  series = {Lecture {{Notes}} in {{Computer Science}}},
  volume = {10687},
  pages = {13},
  publisher = {Springer},
  address = {Prague, Czech Republic},
  doi = {10.1007/978-3-319-71069-3_22},
  urldate = {2025-10-01},
  abstract = {We propose a way to unify two approaches of non-cloning in quantum lambda-calculi. The first approach is to forbid duplicating variables, while the second is to consider all lambda-terms as algebraic-linear functions. We illustrate this idea by defining a quantum extension of first-order simply-typed lambda-calculus, where the type is linear on superposition, while allows cloning base vectors. In addition, we provide an interpretation of the calculus where superposed types are interpreted as vector spaces and non-superposed types as their basis.},
  keywords = {algebraic linearity,lambda-calculus,linear logic,measurement,quantum computing},
  file = {G:\マイドライブ\Zotero\Díaz-Caro and Dowek - 2017 - Typing Quantum Superpositions and Measurement.pdf}
}

@article{DÍAZ-CARO2019_TwoLinearitiesQuantum,
  title = {Two Linearities for Quantum Computing in the Lambda Calculus},
  author = {{D{\'i}az-Caro}, Alejandro and Dowek, Gilles and Rinaldi, Juan Pablo},
  year = 2019,
  month = dec,
  journal = {Biosystems},
  series = {Selected Papers from the {{International Conference}} on the {{Theory}} and {{Practice}} of {{Natural Computing}} 2017},
  volume = {186},
  pages = {104012},
  issn = {0303-2647},
  doi = {10.1016/j.biosystems.2019.104012},
  urldate = {2025-10-01},
  abstract = {We propose a way to unify two approaches of non-cloning in quantum lambda-calculi: logical and algebraic linearities. The first approach is to forbid duplicating variables, while the second is to consider all lambda-terms as algebraic-linear functions. We illustrate this idea by defining a quantum extension of first-order simply-typed lambda-calculus, where the type is linear on superposition, while allows cloning base vectors. In addition, we provide an interpretation of the calculus where superposed types are interpreted as vector spaces and non-superposed types as their basis.},
  keywords = {Algebraic linearity,Lambda-calculus,Linear logic,Measurement,Quantum computing},
  file = {G\:\\マイドライブ\\Zotero\\Díaz-Caro et al. - 2019 - Two linearities for quantum computing in the lambda calculus.pdf;C\:\\Users\\ksrk\\Zotero\\storage\\K9LVCY75\\S0303264718301102.html}
}

@article{DÍAZ-CARO2022_QuickOverviewQuantum,
  title = {A {{Quick Overview}} on the {{Quantum Control Approach}} to the {{Lambda Calculus}}},
  author = {{D{\'i}az-Caro}, Alejandro},
  year = 2022,
  month = apr,
  journal = {Electronic Proceedings in Theoretical Computer Science},
  volume = {357},
  eprint = {2204.03885},
  primaryclass = {cs},
  pages = {1--17},
  issn = {2075-2180},
  doi = {10.4204/EPTCS.357.1},
  urldate = {2025-10-02},
  abstract = {In this short overview, we start with the basics of quantum computing, explaining the difference between the quantum and the classical control paradigms. We give an overview of the quantum control line of research within the lambda calculus, ranging from untyped calculi up to categorical and realisability models. This is a summary of the last 10+ years of research in this area, starting from Arrighi and Dowek's seminal work until today.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science},
  file = {G\:\\マイドライブ\\Zotero\\Díaz-Caro - 2022 - A Quick Overview on the Quantum Control Approach to the Lambda Calculus.pdf;C\:\\Users\\ksrk\\Zotero\\storage\\DFGFFJYE\\2204.html}
}

@inproceedings{FAGGIAN2025_RewritingTheoryQuantum,
  title = {A {{Rewriting Theory}} for {{Quantum}} {\L}ambda-{{Calculus}}},
  booktitle = {33rd {{EACSL Annual Conference}} on {{Computer Science Logic}} ({{CSL}} 2025)},
  author = {Faggian, Claudia and Lopez, Gaetan and Valiron, Beno{\^i}t},
  editor = {Endrullis, J{\"o}rg and Schmitz, Sylvain},
  year = 2025,
  series = {Leibniz {{International Proceedings}} in {{Informatics}} ({{LIPIcs}})},
  volume = {326},
  pages = {47:1--47:22},
  publisher = {Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  address = {Dagstuhl, Germany},
  issn = {1868-8969},
  doi = {10.4230/LIPIcs.CSL.2025.47},
  urldate = {2025-10-07},
  isbn = {978-3-95977-362-1},
  keywords = {asymptotic normalization,operational semantics,principles of quantum programming languages,probabilistic rewriting,quantum lambda-calculus},
  file = {G\:\\マイドライブ\\Zotero\\Faggian et al. - 2025 - A Rewriting Theory for Quantum łambda-Calculus.pdf;C\:\\Users\\ksrk\\Zotero\\storage\\GMDA4PJV\\LIPIcs.CSL.2025.html}
}

@article{GIRARD1987_LinearLogic,
  title = {Linear Logic},
  author = {Girard, Jean-Yves},
  year = 1987,
  month = jan,
  journal = {Theoretical Computer Science},
  volume = {50},
  number = {1},
  pages = {1--101},
  issn = {0304-3975},
  doi = {10.1016/0304-3975(87)90045-4},
  urldate = {2025-10-05},
  abstract = {The familiar connective of negation is broken into two operations: linear negation which is the purely negative part of negation and the modality ``of course'' which has the meaning of a reaffirmation. Following this basic discovery, a completely new approach to the whole area between constructive logics and programmation is initiated.},
  file = {G\:\\マイドライブ\\Zotero\\Girard - 1987 - Linear logic.pdf;C\:\\Users\\ksrk\\Zotero\\storage\\HGWDJD2U\\0304397587900454.html}
}

@incollection{HEUNEN2013_FunctorL2,
  title = {On the {{Functor}} {$\ell$}2},
  booktitle = {Computation, {{Logic}}, {{Games}}, and {{Quantum Foundations}}. {{The Many Facets}} of {{Samson Abramsky}}: {{Essays Dedicated}} to {{Samson Abramsky}} on the {{Occasion}} of {{His}} 60th {{Birthday}}},
  author = {Heunen, Chris},
  editor = {Coecke, Bob and Ong, Luke and Panangaden, Prakash},
  year = 2013,
  pages = {107--121},
  publisher = {Springer},
  address = {Berlin, Heidelberg},
  doi = {10.1007/978-3-642-38164-5_8},
  urldate = {2025-10-17},
  abstract = {We study the functor {$\ell$}2 from the category of partial injections to the category of Hilbert spaces. The former category is finitely accessible, and in both categories homsets are algebraic domains. The functor preserves daggers, monoidal structures, enrichment, and various (co)limits, but has no adjoints. Up to unitaries, its direct image consists precisely of the partial isometries, but its essential image consists of all continuous linear maps between Hilbert spaces.},
  isbn = {978-3-642-38164-5},
  langid = {english},
  keywords = {Hilbert Space,Inverse Semigroup,Orthonormal Basis,Partial Isometry,Polar Decomposition},
  file = {G:\マイドライブ\Zotero\Heunen - 2013 - On the Functor ℓ2.pdf}
}

@article{HIRATA2025_QurtsAutomaticQuantum,
  title = {Qurts: {{Automatic Quantum Uncomputation}} by {{Affine Types}} with {{Lifetime}}},
  shorttitle = {Qurts},
  author = {Hirata, Kengo and Heunen, Chris},
  year = 2025,
  month = jan,
  journal = {Proc. ACM Program. Lang.},
  volume = {9},
  number = {POPL},
  pages = {6:155--6:182},
  doi = {10.1145/3704842},
  urldate = {2025-08-23},
  abstract = {Uncomputation is a feature in quantum programming that allows the programmer to discard a value without losing quantum information, and that allows the compiler to reuse resources. Whereas quantum information has to be treated linearly by the type system, automatic uncomputation enables the programmer to treat it affinely to some extent. Automatic uncomputation requires a substructural type system between linear and affine, a subtlety that has only been captured by existing languages in an ad hoc way. We extend the Rust type system to the quantum setting to give a uniform framework for automatic uncomputation called Qurts (pronounced quartz). Specifically, we parameterise types by lifetimes, permitting them to be affine during their lifetime, while being restricted to linear use outside their lifetime. We also provide two operational semantics: one based on classical simulation, and one that does not depend on any specific uncomputation strategy.},
  file = {G:\マイドライブ\Zotero\Hirata and Heunen - 2025 - Qurts Automatic Quantum Uncomputation by Affine Types with Lifetime.pdf}
}

@misc{KERINEC2023_Algebraic$l$calculusConservative,
  title = {The Algebraic \${$\lambda\$$}-Calculus Is a Conservative Extension of the Ordinary \${$\lambda\$$}-Calculus},
  author = {Kerinec, Axel and Auclair, Lionel Vaux},
  year = 2023,
  month = jun,
  number = {arXiv:2305.01067},
  eprint = {2305.01067},
  primaryclass = {cs},
  publisher = {arXiv},
  doi = {10.48550/arXiv.2305.01067},
  urldate = {2025-10-02},
  abstract = {The algebraic \${\textbackslash}lambda\$-calculus is an extension of the ordinary \${\textbackslash}lambda\$-calculus with linear combinations of terms. We establish that two ordinary \${\textbackslash}lambda\$-terms are equivalent in the algebraic \${\textbackslash}lambda\$-calculus iff they are \${\textbackslash}beta\$-equal. Although this result was originally stated in the early 2000's (in the setting of Ehrhard and Regnier's differential \${\textbackslash}lambda\$-calculus), the previously proposed proofs were wrong: we explain why previous approaches failed and develop a new proof technique to establish conservativity.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Logic in Computer Science},
  file = {G\:\\マイドライブ\\Zotero\\Kerinec and Auclair - 2023 - The algebraic $λ$-calculus is a conservative extension of the ordinary $λ$-calculus.pdf;C\:\\Users\\ksrk\\Zotero\\storage\\SPWI26LI\\2305.html}
}

@book{KREYSZIG1978_IntroductoryFunctionalAnalysis,
  title = {Introductory {{Functional Analysis}} with {{Applicatioins}}},
  author = {Kreyszig, Erwin},
  year = 1978,
  publisher = {Wiley},
  address = {New York},
  isbn = {0-471-50731-8}
}

@article{KUMARPATI2000_ImpossibilityDeletingUnknowna,
  title = {Impossibility of Deleting an Unknown Quantum State},
  author = {Kumar Pati, Arun and Braunstein, Samuel L.},
  year = 2000,
  month = mar,
  journal = {Nature},
  volume = {404},
  number = {6774},
  pages = {164--165},
  publisher = {Nature Publishing Group},
  issn = {1476-4687},
  doi = {10.1038/404130b0},
  urldate = {2025-10-24},
  abstract = {A photon in an arbitrary polarization state cannot be cloned perfectly1,2. But suppose that at our disposal we have several copies of a photon in an unknown state. Is it possible to delete the information content of one or more of these photons by a physical process? Specifically, if two photons are in the same initial polarization state, is there a mechanism that produces one photon in the same initial state and the other in some standard polarization state? If this could be done, then one would create a standard blank state onto which one could copy an unknown state approximately, by deterministic cloning3,4 or exactly, by probabilistic cloning5,6. This could in principle be useful in quantum computation, where one could store new information in an already computed state by deleting the old information. Here we show, however, that the linearity of quantum theory does not allow us to delete a copy of an arbitrary quantum state perfectly. Though in a classical computer information can be deleted (reversibly) against a copy7, the analogous task cannot be accomplished, even irreversibly, with quantum information.},
  copyright = {2000 Macmillan Magazines Ltd.},
  langid = {english},
  keywords = {Humanities and Social Sciences,multidisciplinary,Science},
  file = {G:\マイドライブ\Zotero\Kumar Pati and Braunstein - 2000 - Impossibility of deleting an unknown quantum state.pdf}
}

@misc{NIELSEN2010_QuantumComputationQuantum,
  title = {Quantum {{Computation}} and {{Quantum Information}}: 10th {{Anniversary Edition}}},
  shorttitle = {Quantum {{Computation}} and {{Quantum Information}}},
  author = {Nielsen, Michael A. and Chuang, Isaac L.},
  year = 2010,
  month = dec,
  journal = {Cambridge Aspire website},
  publisher = {Cambridge University Press},
  doi = {10.1017/CBO9780511976667},
  urldate = {2025-08-22},
  abstract = {One of the most cited books in physics of all time, Quantum Computation and Quantum Information remains the best textbook in this exciting field of science. This 10th anniversary edition includes an introduction from the authors setting the work in context. This comprehensive textbook describes such remarkable effects as fast quantum algorithms, quantum teleportation, quantum cryptography and quantum error-correction. Quantum mechanics and computer science are introduced before moving on to describe what a quantum computer is, how it can be used to solve problems faster than 'classical' computers and its real-world implementation. It concludes with an in-depth treatment of quantum information. Containing a wealth of figures and exercises, this well-known textbook is ideal for courses on the subject, and will interest beginning graduate students and researchers in physics, computer science, mathematics, and electrical engineering.},
  howpublished = {https://www.cambridge.org/highereducation/books/quantum-computation-and-quantum-information/01E10196D0A682A6AEFFEA52D53BE9AE},
  isbn = {9780511976667},
  langid = {english},
  file = {C:\Users\ksrk\Zotero\storage\THP94WDB\01E10196D0A682A6AEFFEA52D53BE9AE.html}
}

@article{PAGANI2014_ApplyingQuantitativeSemantics,
  title = {Applying Quantitative Semantics to Higher-Order Quantum Computing},
  author = {Pagani, Michele and Selinger, Peter and Valiron, Beno{\^i}t},
  year = 2014,
  month = jan,
  journal = {SIGPLAN Not.},
  volume = {49},
  number = {1},
  pages = {647--658},
  issn = {0362-1340},
  doi = {10.1145/2578855.2535879},
  urldate = {2025-08-20},
  abstract = {Finding a denotational semantics for higher order quantum computation is a long-standing problem in the semantics of quantum programming languages. Most past approaches to this problem fell short in one way or another, either limiting the language to an unusably small finitary fragment, or giving up important features of quantum physics such as entanglement. In this paper, we propose a denotational semantics for a quantum lambda calculus with recursion and an infinite data type, using constructions from quantitative semantics of linear logic.},
  file = {G:\マイドライブ\Zotero\Pagani et al. - 2014 - Applying quantitative semantics to higher-order quantum computing 1.pdf}
}

@inproceedings{PAYKIN2017_QWIRECoreLanguage,
  title = {{{QWIRE}}: A Core Language for Quantum Circuits},
  shorttitle = {{{QWIRE}}},
  booktitle = {Proceedings of the 44th {{ACM SIGPLAN Symposium}} on {{Principles}} of {{Programming Languages}}},
  author = {Paykin, Jennifer and Rand, Robert and Zdancewic, Steve},
  year = 2017,
  month = jan,
  series = {{{POPL}} '17},
  pages = {846--858},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3009837.3009894},
  urldate = {2025-09-23},
  abstract = {This paper introduces QWIRE (``choir''), a language for defining quantum circuits and an interface for manipulating them inside of an arbitrary classical host language. QWIRE is minimal---it contains only a few primitives---and sound with respect to the physical properties entailed by quantum mechanics. At the same time, QWIRE is expressive and highly modular due to its relationship with the host language, mirroring the QRAM model of computation that places a quantum computer (controlled by circuits) alongside a classical computer (controlled by the host language).  We present QWIRE along with its type system and operational semantics, which we prove is safe and strongly normalizing whenever the host language is. We give circuits a denotational semantics in terms of density matrices. Throughout, we investigate examples that demonstrate the expressive power of QWIRE, including extensions to the host language that (1) expose a general analysis framework for circuits, and (2) provide dependent types.},
  isbn = {978-1-4503-4660-3},
  file = {G:\マイドライブ\Zotero\Paykin et al. - 2017 - QWIRE a core language for quantum circuits.pdf}
}

@phdthesis{ROSS2017_AlgebraicLogicalMethods,
  title = {Algebraic and {{Logical Methods}} in {{Quantum Computation}}},
  author = {Ross, Neil J.},
  year = 2017,
  month = feb,
  eprint = {1510.02198},
  primaryclass = {quant-ph},
  urldate = {2025-10-03},
  abstract = {This thesis contains contributions to the theory of quantum computation. We first define a new method to efficiently approximate special unitary operators. Specifically, given a special unitary U and a precision \{{\textbackslash}epsilon\} {$>$} 0, we show how to efficiently find a sequence of Clifford+V or Clifford+T operators whose product approximates U up to \{{\textbackslash}epsilon\} in the operator norm. In the general case, the length of the approximating sequence is asymptotically optimal. If the unitary to approximate is diagonal then our method is optimal: it yields the shortest sequence approximating U up to \{{\textbackslash}epsilon\}. Next, we introduce a mathematical formalization of a fragment of the Quipper quantum programming language. We define a typed lambda calculus called Proto-Quipper which formalizes a restricted but expressive fragment of Quipper. The type system of Proto-Quipper is based on intuitionistic linear logic and prohibits the duplication of quantum data, in accordance with the no-cloning property of quantum computation. We prove that Proto-Quipper is type-safe in the sense that it enjoys the subject reduction and progress properties.},
  archiveprefix = {arXiv},
  school = {arXiv},
  keywords = {Quantum Physics},
  file = {G\:\\マイドライブ\\Zotero\\Ross - 2017 - Algebraic and Logical Methods in Quantum Computation 1.pdf;C\:\\Users\\ksrk\\Zotero\\storage\\3Q5C3QTW\\1510.html}
}

@inproceedings{SABRY2018_SymmetricPatternMatchingQuantum,
  title = {From {{Symmetric Pattern-Matching}} to {{Quantum Control}}},
  booktitle = {Foundations of {{Software Science}} and {{Computation Structures}}},
  author = {Sabry, Amr and Valiron, Beno{\^i}t and Vizzotto, Juliana Kaizer},
  editor = {Baier, Christel and Dal Lago, Ugo},
  year = 2018,
  pages = {348--364},
  publisher = {Springer International Publishing},
  address = {Cham},
  doi = {10.1007/978-3-319-89366-2_19},
  abstract = {One perspective on quantum algorithms is that they are classical algorithms having access to a special kind of memory with exotic properties. This perspective suggests that, even in the case of quantum algorithms, the control flow notions of sequencing, conditionals, loops, and recursion are entirely classical. There is however, another notion of control flow, that is itself quantum. The notion of quantum conditional expression is reasonably well-understood: the execution of the two expressions becomes itself a superposition of executions. The quantum counterpart of loops and recursion is however not believed to be meaningful in its most general form.},
  isbn = {978-3-319-89366-2},
  langid = {english},
  file = {G:\マイドライブ\Zotero\Sabry et al. - 2018 - From Symmetric Pattern-Matching to Quantum Control 1.pdf}
}

@article{SANGIORGI2019_EnvironmentalBisimulationsProbabilistic,
  title = {Environmental {{Bisimulations}} for {{Probabilistic Higher-order Languages}}},
  author = {Sangiorgi, Davide and Vignudelli, Valeria},
  year = 2019,
  month = oct,
  journal = {ACM Trans. Program. Lang. Syst.},
  volume = {41},
  number = {4},
  pages = {22:1--22:64},
  issn = {0164-0925},
  doi = {10.1145/3350618},
  urldate = {2025-11-01},
  abstract = {Environmental bisimulations for probabilistic higher-order languages are studied. In contrast with applicative bisimulations, environmental bisimulations are known to be more robust and do not require sophisticated techniques such as Howe's in the proofs of congruence.As representative calculi, call-by-name and call-by-value {$\lambda$}-calculus, and a (call-by-value) {$\lambda$}-calculus extended with references (i.e., a store) are considered. In each case, full abstraction results are derived for probabilistic environmental similarity and bisimilarity with respect to contextual preorder and contextual equivalence, respectively. Some possible enhancements of the (bi)simulations, as ``up-to techniques,'' are also presented.Probabilities force a number of modifications to the definition of environmental bisimulations in non-probabilistic languages. Some of these modifications are specific to probabilities, others may be seen as general refinements of environmental bisimulations, applicable also to non-probabilistic languages. Several examples are presented, to illustrate the modifications and the differences.},
  file = {G:\マイドライブ\Zotero\Sangiorgi and Vignudelli - 2019 - Environmental Bisimulations for Probabilistic Higher-order Languages.pdf}
}

@article{SELINGER2004_QuantumProgrammingLanguage,
  title = {Towards a Quantum Programming Language},
  author = {Selinger, Peter},
  year = 2004,
  month = aug,
  journal = {Mathematical Structures in Computer Science},
  volume = {14},
  number = {4},
  pages = {527--586},
  issn = {1469-8072, 0960-1295},
  doi = {10.1017/S0960129504004256},
  urldate = {2025-08-21},
  abstract = {We propose the design of a programming language for quantum computing. Traditionally, quantum algorithms are frequently expressed at the hardware level, for instance in terms of the quantum circuit model or quantum Turing machines. These approaches do not encourage structured programming or abstractions such as data types. In this paper, we describe the syntax and semantics of a simple quantum programming language with high-level features such as loops, recursive procedures, and structured data types. The language is functional in nature, statically typed, free of run-time errors, and has an interesting denotational semantics in terms of complete partial orders of superoperators.},
  langid = {english},
  file = {G:\マイドライブ\Zotero\Selinger - 2004 - Towards a quantum programming language 1.pdf}
}

@inproceedings{SELINGER2005_LambdaCalculusQuantum,
  title = {A Lambda Calculus for Quantum Computation with Classical Control},
  booktitle = {Proceedings of the 7th International Conference on {{Typed Lambda Calculi}} and {{Applications}}},
  author = {Selinger, Peter and Valiron, Beno{\^i}t},
  year = 2005,
  month = apr,
  series = {{{TLCA}}'05},
  pages = {354--368},
  publisher = {Springer-Verlag},
  address = {Berlin, Heidelberg},
  doi = {10.1007/11417170_26},
  urldate = {2025-08-29},
  abstract = {The objective of this paper is to develop a functional programming language for quantum computers. We develop a lambda calculus for the classical control model, following the first author's work on quantum flow-charts. We define a call-by-value operational semantics, and we give a type system using affine intuitionistic linear logic. The main results of this paper are the safety properties of the language and the development of a type inference algorithm.},
  isbn = {978-3-540-25593-2},
  file = {G:\マイドライブ\Zotero\Selinger and Valiron - A lambda calculus for quantum computation with classical control.pdf}
}

@incollection{SELINGER2009_QuantumLambdaCalculus,
  title = {Quantum {{Lambda Calculus}}},
  booktitle = {Semantic {{Techniques}} in {{Quantum Computation}}},
  author = {Selinger, Peter and Valiron, Beno{\^i}t},
  year = 2009,
  month = nov,
  pages = {135--172},
  publisher = {Cambridge University Press},
  doi = {10.1017/CBO9781139193313.005},
  urldate = {2025-10-01},
  abstract = {Semantic Techniques in Quantum Computation - November 2009},
  langid = {english},
  file = {G\:\\マイドライブ\\Zotero\\2009 - Quantum Lambda Calculus.pdf;C\:\\Users\\ksrk\\Zotero\\storage\\WA9RH45X\\0FFF8F7D9091CE1215F8D30077443777.html}
}

@article{VANTONDER2004_LambdaCalculusQuantum,
  title = {A {{Lambda Calculus}} for {{Quantum Computation}}},
  author = {{van Tonder}, Andr{\'e}},
  year = 2004,
  month = jan,
  journal = {SIAM Journal on Computing},
  volume = {33},
  number = {5},
  pages = {1109--1135},
  publisher = {{Society for Industrial and Applied Mathematics}},
  issn = {0097-5397},
  doi = {10.1137/S0097539703432165},
  urldate = {2025-09-26},
  abstract = {Adiabatic quantum computation has recently attracted attention in the physics and computer science communities, but its computational power was unknown. We describe an efficient adiabatic simulation of any given quantum algorithm, which implies that the adiabatic computation model and the conventional quantum computation model are polynomially equivalent. Our result can be extended to the physically realistic setting of particles arranged on a two-dimensional grid with nearest neighbor interactions. The equivalence between the models allows stating the main open problems in quantum computation using well-studied mathematical objects such as eigenvectors and spectral gaps of sparse matrices.},
  file = {G:\マイドライブ\Zotero\van Tonder - 2004 - A Lambda Calculus for Quantum Computation.pdf}
}

@article{VAUX2009_AlgebraicLambdaCalculus,
  title = {The Algebraic Lambda Calculus},
  author = {Vaux, Lionel},
  year = 2009,
  month = oct,
  journal = {Mathematical Structures in Computer Science},
  volume = {19},
  number = {5},
  pages = {1029--1059},
  issn = {1469-8072, 0960-1295},
  doi = {10.1017/S0960129509990089},
  urldate = {2025-08-22},
  abstract = {We introduce an extension of the pure lambda calculus by endowing the set of terms with the structure of a vector space, or, more generally, of a module, over a fixed set of scalars. Moreover, terms are subject to identities similar to the usual pointwise definition of linear combinations of functions with values in a vector space. We then study a natural extension of beta reduction in this setting: we prove it is confluent, then discuss consistency and conservativity over the ordinary lambda calculus. We also provide normalisation results for a simple type system.},
  langid = {english},
  file = {G:\マイドライブ\Zotero\Vaux - 2009 - The algebraic lambda calculus.pdf}
}

@article{VOICHICK2023_QunityUnifiedLanguage,
  title = {Qunity: {{A Unified Language}} for {{Quantum}} and {{Classical Computing}}},
  shorttitle = {Qunity},
  author = {Voichick, Finn and Li, Liyi and Rand, Robert and Hicks, Michael},
  year = 2023,
  month = jan,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {7},
  number = {POPL},
  pages = {921--951},
  issn = {2475-1421},
  doi = {10.1145/3571225},
  urldate = {2025-10-01},
  abstract = {FINN VOICHICK, University of Maryland, USA LIYI LI, University of Maryland, USA ROBERT RAND, University of Chicago, USA MICHAEL HICKS{$\ast$}, University of Maryland and Amazon, USA We introduce Qunity, a new quantum programming language designed to treat quantum computing as a natural generalization of classical computing. Qunity presents a unified syntax where familiar programming constructs can have both quantum and classical effects. For example, one can use sum types to implement the direct sum of linear operators, exception-handling syntax to implement projective measurements, and aliasing to induce entanglement. Further, Qunity takes advantage of the overlooked bqp subroutine theorem, allowing one to construct reversible subroutines from irreversible quantum algorithms through the uncomputation of ``garbage'' outputs. Unlike existing languages that enable quantum aspects with separate add-ons (like a classical language with quantum gates bolted on), Qunity provides a unified syntax and a novel denotational semantics that guarantees that programs are quantum mechanically valid. We present Qunity's syntax, type system, and denotational semantics, showing how it can cleanly express several quantum algorithms. We also detail how Qunity can be compiled into a low-level qubit circuit language like OpenQasm, proving the realizability of our design. CCS Concepts: {$\bullet$} Software and its engineering {$\rightarrow$} Multiparadigm languages; Syntax; Control structures; Data types and structures; Compilers; Functional languages; Patterns; Semantics; {$\bullet$} Theory of computation {$\rightarrow$} Denotational semantics; Quantum information theory; Control primitives; Categorical semantics; Quantum query complexity; Assertions.},
  langid = {english},
  file = {G:\マイドライブ\Zotero\Voichick et al. - 2023 - Qunity A Unified Language for Quantum and Classical Computing.pdf}
}

@article{WOOTTERS1982_SingleQuantumCannota,
  title = {A Single Quantum Cannot Be Cloned},
  author = {Wootters, W. K. and Zurek, W. H.},
  year = 1982,
  month = oct,
  journal = {Nature},
  volume = {299},
  number = {5886},
  pages = {802--803},
  publisher = {Nature Publishing Group},
  issn = {1476-4687},
  doi = {10.1038/299802a0},
  urldate = {2025-10-24},
  abstract = {If a photon of definite polarization encounters an excited atom, there is typically some nonvanishing probability that the atom will emit a second photon by stimulated emission. Such a photon is guaranteed to have the same polarization as the original photon. But is it possible by this or any other process to amplify a quantum state, that is, to produce several copies of a quantum system (the polarized photon in the present case) each having the same state as the original? If it were, the amplifying process could be used to ascertain the exact state of a quantum system: in the case of a photon, one could determine its polarization by first producing a beam of identically polarized copies and then measuring the Stokes parameters1. We show here that the linearity of quantum mechanics forbids such replication and that this conclusion holds for all quantum systems.},
  copyright = {1982 Springer Nature Limited},
  langid = {english},
  keywords = {Humanities and Social Sciences,multidisciplinary,Science},
  file = {G:\マイドライブ\Zotero\Wootters and Zurek - 1982 - A single quantum cannot be cloned.pdf}
}
